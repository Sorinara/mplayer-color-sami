--- ./sub/subreader_o.c	2014-05-28 04:22:12.000000000 +0900
+++ ./sub/subreader.c	2016-02-19 13:57:42.066809206 +0900
@@ -20,6 +20,7 @@
  * with MPlayer; if not, write to the Free Software Foundation, Inc.,
  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
+#define _GNU_SOURCE
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -36,6 +37,7 @@
 #include "mpcommon.h"
 #include "path.h"
 #include "subreader.h"
+#include "subreader_sami.h" /* - add header for sami color */
 #include "subassconvert.h"
 #include "sub.h"
 #include "vobsub.h"
@@ -89,6 +91,38 @@
 unsigned long previous_sub_end;
 #endif
 
+/* TODO: to dynamic size */
+#define TEXT_BUFFER_LENGTH_MAX      10000
+#define ASS_TEXT_BUFFER_LENGTH_MAX  10000
+#define TAG_PROPERTY_MAX            256
+#define TAG_STACK_MAX               128
+
+typedef struct _Tag_Property{
+    char *name,
+         *value;
+    int  name_allocation,
+         value_allocation;
+} Tag_Property;
+
+typedef struct _Tag{
+    char *name;
+    int  name_allocation,
+         property_count;
+
+    Tag_Property property[TAG_PROPERTY_MAX];
+} Tag;
+
+typedef struct _Ass_Tag{
+    char *face,
+         *color;
+    int bold,
+        italic,
+        underline,
+        strike,
+        ruby,
+        rt;
+} Ass_Data;
+
 static int eol(char p) {
 	return p=='\r' || p=='\n' || p=='\0';
 }
@@ -117,13 +151,1030 @@
     return NULL;
 }
 
-static void sami_add_line(subtitle *current, char *buffer, char **pos) {
-    char *p = *pos;
-    *p = 0;
+//#ifdef DEBUG_SAMI_COLOR
+static int sami_tag_stack_element_print(const int line, const Tag *tag_stack_element, const char *message)
+{/*{{{*/
+    int i;
+
+    if(tag_stack_element == NULL){
+        return -1;
+    }
+
+    fprintf(stderr, "%s(%d) Tag Name : %s(%d)\n", message, line, tag_stack_element->name, tag_stack_element->name_allocation); 
+
+    for(i = 0;i < tag_stack_element->property_count;i ++){
+        fprintf(stderr, "[%d]     Property %s[%d] = '%s'(%d) }\n", i, tag_stack_element->property[i].name, tag_stack_element->property[i].name_allocation, tag_stack_element->property[i].value, tag_stack_element->property[i].value_allocation);
+    }
+
+    return 0;
+}/*}}}*/
+
+static void sami_tag_stack_print(const int line, Tag *tag_stack[TAG_STACK_MAX], const unsigned int element_max_count, const char *message)
+{/*{{{*/
+    int stack_index,
+        j;
+
+    fprintf(stderr, "[%s][%s(%d)] %s\n", __TIME__, __FILE__, line, message);
+
+    if(tag_stack[0] == NULL){
+        fprintf(stderr, "[%s][%s(%d)] %s\n", __TIME__, __FILE__, line, "Stack Empty");
+        return;
+    }
+
+    for(stack_index = 0;stack_index < element_max_count;stack_index ++){
+        if(tag_stack[stack_index] == NULL){
+            break;
+        }
+
+        fprintf(stderr, "[%s][%s(%d)] %s (%d) : %s (%p)\n", __TIME__, __FILE__, line, "Stack Tag Name     ", stack_index, tag_stack[stack_index]->name, tag_stack[stack_index]->name);
+
+        for(j = 0;j < tag_stack[stack_index]->property_count;j ++){
+            fprintf(stderr, "[%s][%s(%d)] %s (%d/%d)         : { [%s](%d) = '%s'(%d) }\n", __TIME__, __FILE__, line, "-Property", j, tag_stack[stack_index]->property_count, tag_stack[stack_index]->property[j].name, tag_stack[stack_index]->property[j].name_allocation, tag_stack[stack_index]->property[j].value, tag_stack[stack_index]->property[j].value_allocation);
+        }
+    }
+
+    if(stack_index + 1 == element_max_count){
+        fprintf(stderr, "[%s][%s(%d)] %s\n", __TIME__, __FILE__, line, "Stack Full");
+    }
+}/*}}}*/
+//#endif
+
+static void stack_free(void **stack, void (*stack_element_free)(void*), const unsigned int element_max_count)
+{/*{{{*/
+    int stack_index;
+
+    for(stack_index = 0;stack_index < element_max_count;stack_index ++){
+        if(stack[stack_index] == NULL){
+            break;
+        }
+
+        /* fprintf(stderr, "[%s][%s(%d)] -- Free Stack (%d) (%p) --\n", __TIME__, __FILE__, __LINE__, stack_index, stack[stack_index]); */
+        stack_element_free(stack[stack_index]);
+        free(stack[stack_index]);
+    }
+}/*}}}*/
+
+static int stack_top_index_get(void **stack, const unsigned int element_max_count)
+{/*{{{*/
+    int stack_index;
+
+    for(stack_index = 0;stack_index < element_max_count;stack_index ++){
+        if(stack[stack_index] == NULL){
+            break;
+        }
+    }
+
+    -- stack_index;
+
+    // empty
+    if(stack_index == -1){
+        return -1;
+    }
+
+    // full
+    if(stack_index == element_max_count){
+        return -2;
+    }
+
+    return stack_index;
+}/*}}}*/
+
+// get point in stack, not data structure !
+static int stack_top_get(void **stack, void **element, const unsigned int element_max_count)
+{/*{{{*/
+    int stack_top_index;
+
+    // check overflow
+    switch((stack_top_index = stack_top_index_get(stack, element_max_count))){
+        case -1:
+            return -1;
+        case -2:
+            return -2;
+    }
+
+    if(element != NULL){
+       *element = stack[stack_top_index];
+    }
+
+    return stack_top_index;
+}/*}}}*/
+
+// top position in stack, memory allocation
+static int stack_push(void **stack, const void *element, const unsigned int element_size, const unsigned int element_max_count)
+{/*{{{*/
+    int stack_top_index;
+
+    // check overflow
+    if((stack_top_index = stack_top_index_get(stack, element_max_count)) == -2){
+        return -1;
+    }
+
+    if((stack[stack_top_index + 1] = calloc(1, element_size)) == NULL){
+        return -2;
+    }
+
+    /* fprintf(stderr, "[%s][%s(%d)] DEBUG LINE '%s' (%p)\n", __TIME__,  __FILE__, __LINE__, "Element Allocated", stack[stack_top_index + 1]); */
+    memcpy(stack[stack_top_index + 1], element, element_size);
+    return 0;
+}/*}}}*/
+
+// remove only, if you want get element in stack, use "stack_top_get()"
+static void stack_pop(void **stack, const unsigned int index, void (*stack_element_free)(void*))
+{/*{{{*/
+    stack_element_free(stack[index]);
+    /* fprintf(stderr, "[%s][%s(%d)] DEBUG LINE '%s' (%d) (%p)\n", __TIME__,  __FILE__, __LINE__, "Stack Element Free", index, stack[index]); */
+    free(stack[index]);
+    /* fprintf(stderr, "[%s][%s(%d)] DEBUG LINE '%s'\n", __TIME__,  __FILE__, __LINE__, "Stack Element Free - Done"); */
+    stack[index] = NULL;
+}/*}}}*/
+
+static char* strescnext(char *start, const char delminiter)
+{/*{{{*/
+    char *next;
+
+    next = start;
+
+    while((next = strchr(next, delminiter)) != NULL){
+        // next와 start가 같을경우 (맨처음부터 일치하는 경우)
+        // 아래 *(next - 1)이 잘못된 참조를 하게되므로 이를 예방하기 위한 식
+        if(next == start){
+            break;
+        }
+
+        if(*(next - 1) != '\\'){
+           break; 
+        }
+
+        next ++;
+    }
+
+    // add 'delminter' size
+    return next;
+}/*}}}*/
+
+static int strescmget(char *string, const char start_char, const char end_char, char **middle_string, char **next)
+{/*{{{*/
+    char *start_string_po,
+         *end_string_po;
+    int middle_string_size = 0;
+
+    if(start_char == '\0'){
+        start_string_po = string;
+    }else{
+        if((start_string_po = strescnext(string, start_char)) == NULL){
+            return -1;
+        }
+        // eat start char 
+        start_string_po += sizeof(char);
+    }
+
+    if(end_char == '\0'){
+        end_string_po = string + strlen(string);
+    }else{
+        if((end_string_po = strescnext(start_string_po, end_char)) == NULL){
+            return -2;
+        }
+    }
+
+    if((middle_string_size = end_string_po - start_string_po) <= 0){
+        return -3;
+    }
+
+    if(middle_string != NULL){
+        *middle_string = strndup(start_string_po, middle_string_size);
+    }
+
+    if(next != NULL){
+        // eat end char (over end char)
+        *next = end_string_po + sizeof(char);
+    }
+
+    // do not eat "start_string"
+    return middle_string_size;
+}/*}}}*/
+
+static int strstrip(char *string, char **start_po, int *string_strip_length, char **next)
+{/*{{{*/
+    int i,
+        start_index,
+        end_index,
+        string_length;
+
+    string_length = strlen(string);
+
+    // delete white space
+	for(i = 0;i < string_length;i ++){
+        if(isspace(string[i]) == 0){
+            break;
+        }
+    }
+
+    start_index = i;
+
+    // search non white space end
+	for(;i < string_length;i ++){
+        if(isspace(string[i]) != 0){
+            break;
+        }
+    }
+
+    end_index  = i;
+
+    // delete white space
+	for(;i < string_length;i ++){
+        if(isspace(string[i]) == 0){
+            break;
+        }
+    }
+
+    if(next != NULL){
+        *next = string + i;
+    }
+
+    if(start_index == end_index){
+        return -1;
+    }
+
+    *start_po            = string + start_index;
+    *string_strip_length = end_index - start_index;
+
+    return 0;
+}/*}}}*/
+
+static int strstripdup(char *string, char **strip_string)
+{/*{{{*/
+    int  strip_string_length;
+    char *start_po;
+    
+    // DO NOT USE fourth parameter
+    if(strstrip(string, &start_po, &strip_string_length, NULL) < 0){
+        return -1;
+    }
+
+    *strip_string   = strndup(start_po, strip_string_length);
+    
+    return strip_string_length;
+}/*}}}*/
+
+static void sami_tag_stack_element_free(void *stack_element_void)
+{/*{{{*/
+    int stack_index;
+    Tag *element;
+
+    // for stack's function
+    element = (Tag *)stack_element_void;
+
+    if(element->name_allocation == 1){
+        /* fprintf(stderr, "[%s][%s(%d)] Tag Name Allocation (%d) : '%s' '%p'\n", __TIME__, __FILE__, __LINE__, element->name_allocation, element->name, element->name); */
+        /* fprintf(stderr, "[%s][%s(%d)] %s (%p)\n", __TIME__, __FILE__, __LINE__, "Free Tag Name", element->name); */
+        free(element->name);
+    }
+
+    element->name = NULL;
+
+    for(stack_index = 0;stack_index < element->property_count;stack_index ++){
+        if(element->property[stack_index].name_allocation == 1){
+            free(element->property[stack_index].name);
+            /* fprintf(stderr, "[%s][%s(%d)] Free Property (%d) name (%p)\n", __TIME__, __FILE__, __LINE__, stack_index, element->property[stack_index].name); */
+        }
+
+        if(element->property[stack_index].value_allocation == 1){
+            free(element->property[stack_index].value);
+            /* fprintf(stderr, "[%s][%s(%d)] Free Property (%d) value (%p)\n", __TIME__, __FILE__, __LINE__, stack_index, element->property[stack_index].value); */
+        }
+
+        element->property[stack_index].name     = NULL;
+        element->property[stack_index].value    = NULL;
+    }
+
+    element->property_count = 0;
+}/*}}}*/
+
+static int sami_tag_stack_name_search(Tag *tag_stack[TAG_STACK_MAX], const char *tag_name, const unsigned int element_max_count) 
+{/*{{{*/
+    int stack_index,
+        match_index = -1,
+        match_flag  = 0;
+
+    for(stack_index = 0;stack_index < element_max_count;stack_index ++){
+        if(tag_stack[stack_index] == NULL){
+            break;
+        }
+
+       if(strcasecmp(tag_stack[stack_index]->name, tag_name) == 0){
+            match_flag  = 1;
+            match_index = stack_index;    
+            // do not "break" statement... because for search top in stack
+       }
+    }
+
+    if(match_flag != 1){
+        return -1;
+    }
+
+    return match_index;
+}/*}}}*/
+
+static void sami_tag_stack_element_combine_property_check(const Tag *tag_source, const Tag_Property tag_target_property, int *property_name_match_flag, int *property_value_match_flag, int *stack_top_element, int *stack_index_match)
+{/*{{{*/
+    int property_index;
+
+    *property_name_match_flag   = 0;
+    *property_value_match_flag  = 0;
+
+    for(property_index = 0;property_index < tag_source->property_count;property_index ++){
+        if(strcasecmp(tag_source->property[property_index].name, tag_target_property.name) == 0){
+            *property_name_match_flag = 1;
+
+            if(strcasecmp(tag_source->property[property_index].value, tag_target_property.value) == 0){
+                *property_value_match_flag = 1;
+            }
+
+            break;
+        }
+    }
+
+    switch(*property_name_match_flag){
+        case 0:
+            *stack_index_match = *stack_top_element;
+            (*stack_top_element) ++;
+            break;
+        case 1: 
+            *stack_index_match = property_index;
+            break;
+    }
+}/*}}}*/
+
+static int sami_tag_stack_element_combine(const Tag *tag_source, const Tag *tag_target, Tag *tag_new)
+{/*{{{*/
+    int i,
+        property_name_match_flag,
+        property_value_match_flag,
+        new_tag_index,
+        new_tag_stack_top = 0;
+
+    if(strcasecmp(tag_source->name, tag_target->name) != 0){
+        return -1;
+    }
+
+    new_tag_stack_top = tag_source->property_count;
+
+    // copy tag_source to tag_new and initional allocation flag
+    // (not duplicate data is init 0)
+    for(i = 0;i < new_tag_stack_top;i++){
+        tag_new->property[i].name               = tag_source->property[i].name;
+        tag_new->property[i].value              = tag_source->property[i].value;
+        tag_new->property[i].name_allocation    = 0;
+        tag_new->property[i].value_allocation   = 0;
+    }
+    
+    for(i = 0;i < tag_target->property_count;i++){
+        sami_tag_stack_element_combine_property_check(tag_source, tag_target->property[i], &property_name_match_flag, &property_value_match_flag, &new_tag_stack_top, &new_tag_index);
+
+        switch(property_name_match_flag){
+            // new - (not exist element in stack - top)
+            case 0:
+                tag_new->property[new_tag_index].name               = strdup(tag_target->property[i].name);
+                tag_new->property[new_tag_index].value              = strdup(tag_target->property[i].value);
+                tag_new->property[new_tag_index].name_allocation    = 1;
+                tag_new->property[new_tag_index].value_allocation   = 1;
+                break;
+            // exist - only change value (don't touch name)
+            case 1:
+                // dismatch!
+                if(property_value_match_flag == 0){
+                    tag_new->property[new_tag_index].value              = strdup(tag_target->property[i].value);
+                    tag_new->property[new_tag_index].value_allocation   = 1;
+                }
+                break;
+        }
+        /* fprintf(stderr, "[%s][%s(%d)] (%d) '%s' : %s\n", __TIME__, __FILE__, __LINE__, new_tag_index, tag_target->property[i].name, tag_target->property[i].value); */
+    }
+
+    tag_new->property_count     = new_tag_stack_top;
+    tag_new->name               = tag_source->name;
+    tag_new->name_allocation    = 0;
+
+    return 0;
+}/*}}}*/
+
+static int sami_tag_container_get(char *tag_po, char **tag_container, char **next_po)
+{/*{{{*/
+    // get all tag
+    if(strescmget(tag_po, '<', '>', tag_container, next_po) < 0){
+        return -1;
+    }
+
+    return 0;
+}/*}}}*/
+
+// return 0 : start tag => <font>
+// return 1 : end   tag => </font>
+static int sami_tag_name_get(char *tag_container, char **tag_name, int *tag_property_flag, char **next_po)
+{/*{{{*/
+    int tag_type,
+        tag_container_last_position;
+
+    tag_container_last_position = strlen(tag_container) - 1;
+
+    // first charecter is '/' -> end(close) tag (</font>)
+    if(*tag_container == '/'){
+        if(strstripdup(tag_container + 1, tag_name) < 0){
+            return -1;
+        }
+
+        tag_type            = 1; // end
+        *tag_property_flag  = 0;
+        *next_po            = NULL;
+    // last charecter is '/' -> end(close) tag (<rt/>)
+    }else if(*(tag_container + tag_container_last_position) == '/'){
+        if(strstripdup(tag_container, tag_name) < 0){
+            return -1;
+        }
+
+        /* delete (overwrite) slash */
+        *(tag_container + tag_container_last_position) = '\0';
+        tag_type            = 1; // end
+        *tag_property_flag  = 0;
+        *next_po            = NULL;
+    // get tag name "<font color="blue">" (have property)
+    }else if(strescmget(tag_container, '\0', ' ', tag_name, next_po) > 0){
+        tag_type            = 0;
+        *tag_property_flag  = 1;
+    // get tag_name "<i>" (not have property)
+    }else{
+        if(strstripdup(tag_container, tag_name) < 0){
+            return -2;
+        }
+
+        tag_type            = 0; // start
+        *tag_property_flag  = 0;
+        *next_po            = NULL;
+    }
+
+    return tag_type;
+} /*}}}*/
+
+static void sami_tag_property_get(const Tag *element, Tag_Property *font_property, unsigned int property_max)
+{/*{{{*/
+    int i,
+        j;
+
+    for(i = 0;i < (int)property_max;i++){
+        font_property[i].value = "";
+
+        for(j = 0;j < element->property_count;j ++){
+            if(strcasecmp(font_property[i].name, element->property[j].name) == 0){
+                font_property[i].value            = element->property[j].value;
+                font_property[i].value_allocation = 0;
+            }
+        }
+    }
+}/*}}}*/
+
+static int sami_tag_property_name_get(char *string, char **property_name_strip, char **next)
+{/*{{{*/
+    char *property_name,
+         *property_name_end_po;
+
+    if(strescmget(string, '\0', '=', &property_name, &property_name_end_po) < 0){
+        return -1;
+    }
+
+    if(strstripdup(property_name, property_name_strip) < 0){
+        free(property_name);
+        return -2;
+    }
+
+    // IF YOU DON'T KNOWH THIS, DO NOT MODIFY
+	while(isspace(*property_name_end_po) != 0){
+        property_name_end_po ++;
+    }
+
+    *next = property_name_end_po;
+
+    /* fprintf(stderr, "[%s][%s(%d)] '%s' : '%s' '%s' '%s'\n", __TIME__, __FILE__, __LINE__, "Test - Property Name : ", string, *property_name_strip, *next); */
+    free(property_name);
+    return 0;
+}/*}}}*/
+
+static int sami_tag_property_value_get(char *string, char **value, char **next_po)
+{/*{{{*/
+    char *start_po,
+         *end_po;
+    int  value_length = 0;
+
+    if(string == NULL){
+        return -1;
+    }
+
+    start_po = string;
+
+    // delete first white space
+	while(isspace(*start_po) != 0){
+        start_po ++;
+    }
+
+    // "font" tag, "color" or "face" property
+    switch(*start_po){
+        case '\'' :
+            start_po   += 1;
+
+            if((end_po = strescnext(start_po, '\'')) == NULL){
+                if((end_po = strescnext(start_po, '"')) == NULL){
+                    return -2;
+                }
+            }
+
+            *next_po = end_po + 1;
+            break;
+        case '"' :
+            start_po   += 1;
+
+            if((end_po = strescnext(start_po, '"')) == NULL){
+                if((end_po = strescnext(start_po, '\'')) == NULL){
+                    return -2;
+                }
+            }
+
+            *next_po = end_po + 1;
+            break;
+        default:
+            if((end_po   = strescnext(start_po, ' ')) == NULL){
+                end_po   = start_po + strlen(start_po);
+                *next_po = end_po;
+                break;
+            }
+
+            *next_po = end_po;
+            break;
+    }
+
+    value_length = end_po - start_po;
+    *value       = strndup(start_po, value_length);
+    /* fprintf(stderr, "[%s][%s(%d)]  '%s' '%s' '%s' '%s' %d -> '%s'\n", __TIME__, __FILE__, __LINE__, "Test - Property Value : ", string, start_po, end_po, value_length, *value); */
+    return 0;
+}/*}}}*/
+
+static int sami_tag_property_set(char *tag_property_start_po, Tag *element)
+{/*{{{*/
+    char *property_po,
+         *property_name,
+         *property_name_next_po     = NULL,
+         *property_value,
+         *property_value_next_po    = NULL;
+    int property_count  = 0,
+        ret             = 0;
+
+    if(tag_property_start_po == NULL){
+        return -1;
+    }
+
+    property_po = tag_property_start_po;
+
+    // <font face='abc' color="0x123456">
+    while(*property_po != '\0'){
+        // get property name(face/color) - ERROR Stop! (not exception process)
+        if(sami_tag_property_name_get(property_po, &property_name, &property_name_next_po) < 0 ){
+            ret = 1;
+            break;
+        }
+
+        // get property value - ERROR Stop! (not exception process)
+        if(sami_tag_property_value_get(property_name_next_po, &property_value, &property_value_next_po) < 0){
+            free(property_name);
+            ret = 2;
+            break;
+        }
+
+        element->property[property_count].name                = property_name;
+        element->property[property_count].value               = property_value;
+        element->property[property_count].name_allocation     = 1;
+        element->property[property_count].value_allocation    = 1;
+
+        property_po = property_value_next_po;
+        property_count ++;
+    }
+
+    element->property_count = property_count;
+    
+    /*
+    int i;
+    for(i = 0;i < element->property_count;i ++){
+        fprintf(stderr, "[%s][%s(%d)] %s '%d' '%s' '%s'\n", __TIME__, __FILE__, __LINE__, "Test - Property Loop    :", i, element->property[i].name, element->property[i].value);
+    }  */
+    return ret;
+}/*}}}*/
+
+static int sami_tag_ass_font_color_table(const char *color_name, char *color_buffer)
+{/*{{{*/
+    char first_char,
+         *color_name_table[SAMI_COLORSET_ARRAY_MAX_ROW][SAMI_COLORSET_ARRAY_MAX_COLUMN]  = SAMI_COLORSET_ARRAY_NAME;
+    unsigned int color_value_table[SAMI_COLORSET_ARRAY_MAX_ROW][SAMI_COLORSET_ARRAY_MAX_COLUMN] = SAMI_COLORSET_ARRAY_VALUE;
+    int color_table_index,
+        i,
+        color_value,
+        color_flag = 0;
+    
+    first_char = *color_name;
+
+    if(isalpha(first_char) == 0){
+        return -1;
+    }
+
+    color_table_index = (char)tolower(first_char) - 'a';
+
+    for(i = 0;color_name_table[color_table_index][i] != NULL;i ++){
+        if(strcasecmp(color_name, color_name_table[color_table_index][i]) == 0){
+            color_value = color_value_table[color_table_index][i];
+            sprintf(color_buffer, "%06x", color_value);
+            color_flag = 1;
+            break;
+        }
+    }
+
+    if(color_flag == 0){
+        return -2;
+    }
+
+    return 0;
+}/*}}}*/
+
+static int sami_tag_ass_font_color_tag(const char *color_value, char **ass_color)
+{/*{{{*/
+    // must be init 0
+    char color_rgb_buffer[7]      = {0},
+         color_bgr_buffer[7]      = {0},
+         *strtol_po;
+    unsigned int color_rgb_number   = 0;
+    int color_value_length          = 0,
+        color_value_length_valid    = 0;
+
+    if(*color_value == '#'){
+        color_value ++;
+    }
+
+    // 앞부분 color가 A-F이면 문제가 발생하니까, 
+    // 리턴값으로 결과를 확인하는게 아니라, 처리된 갯수로 확인해야 함.
+    strtol(color_value, &strtol_po, 16);
+    color_value_length          = strlen(color_value);
+    color_value_length_valid    = strtol_po - color_value;
+
+    if(color_value_length != color_value_length_valid){
+        if(sami_tag_ass_font_color_table(color_value, color_rgb_buffer) < 0){
+            return -1;
+        }
+    }else{
+        sprintf(color_rgb_buffer, "%s", color_value);
+    }
+
+    if(strcmp(color_rgb_buffer, "") != 0){
+        // change sami subtitle color (RGB) to ass color(BGR)
+        memcpy(color_bgr_buffer + 0, color_rgb_buffer + 4, 2);
+        memcpy(color_bgr_buffer + 2, color_rgb_buffer + 2, 2);
+        memcpy(color_bgr_buffer + 4, color_rgb_buffer + 0, 2);
+        color_rgb_number = strtol(color_bgr_buffer, NULL, 16);
+
+        if((*ass_color = calloc(13, sizeof(char))) == NULL){
+            return -2;
+        }
+
+        snprintf(*ass_color, 13, "\\c&H%06X&", color_rgb_number);
+    }
+
+    return 0;
+}/*}}}*/
+
+static int sami_tag_ass_font_face_tag(const char *face_value, char **buffer)
+{/*{{{*/
+    int buffer_length;
+
+    // 4 = '\' + 'f' + 'n' + '\0'
+    buffer_length = strlen(face_value) + 4;
+
+    if((*buffer = calloc(buffer_length , sizeof(char))) == NULL){
+        return -1;
+    }
+
+    snprintf(*buffer, buffer_length, "\\fn%s", face_value);
+
+    return 0;
+}/*}}}*/
+
+static int sami_tag_ass_data_get(const Tag *tag_stack_element, Ass_Data *ass_data)
+{/*{{{*/
+    Tag_Property font_property[2] = {0};
+
+    if(strcasecmp(tag_stack_element->name, "font") == 0 ){
+        font_property[0].name = "color";
+        font_property[1].name = "face";
+        sami_tag_property_get(tag_stack_element, font_property, 2);
+
+        if(strcmp(font_property[0].value, "") != 0){
+            if(ass_data->color != NULL){
+                free(ass_data->color);
+            }
+
+            if(sami_tag_ass_font_color_tag(font_property[0].value, &(ass_data->color)) < 0){
+                return -1;
+            }
+        }
+
+        if(strcmp(font_property[1].value, "") != 0){
+            if(ass_data->face != NULL){
+                free(ass_data->face);
+            }
+
+            if(sami_tag_ass_font_face_tag(font_property[1].value, &(ass_data->face)) != 0){
+                return -2;
+            }
+        }
+    }
+
+    if(strcasecmp(tag_stack_element->name, "b") == 0 ){
+        ass_data->bold = 1;
+    }
+
+    if(strcasecmp(tag_stack_element->name, "i") == 0 ){
+        ass_data->italic = 1;
+    }
+    
+    if(strcasecmp(tag_stack_element->name, "u") == 0 ){
+        ass_data->underline = 1;
+    }
+    
+    if(strcasecmp(tag_stack_element->name, "s") == 0 ){
+        ass_data->strike = 1;
+    }
+    
+    // ruby - OK (TODO: must be check "ruby" in tag stck)
+    // UP   : <ruby>주석을 달려는 자막<rt>주석</rt></ruby>
+    // DOWN : 주석을 달려는 자막<ruby><rt>주석</rt><ruby>
+    if(strcasecmp(tag_stack_element->name, "ruby") == 0 ){
+        ass_data->ruby = 1;
+    }
+
+    if(strcasecmp(tag_stack_element->name, "rt") == 0 ){
+        ass_data->rt = 1;
+    }
+
+    return 0;
+}/*}}}*/
+
+static int sami_tag_ass_cat(const char *tag_name, char *buffer)
+{/*{{{*/
+    int tag_start_length,
+        total_length;
+
+    if(buffer == NULL){
+        return -1;
+    }
+
+    if(tag_name == NULL){
+        return -2;
+    }
+
+    
+    if((tag_start_length = strlen(tag_name)) == 0){
+        return -4;
+    }
+
+    total_length = tag_start_length + 4;
+    snprintf(buffer + strlen(buffer), total_length, "{\\%s}", tag_name);
+
+    return total_length;
+}/*}}}*/
+
+// return 0         : empty text
+// return 1         : exist ass text
+// return -1 / -2   : only text
+static int sami_tag_ass_stack(Tag *tag_stack[TAG_STACK_MAX], const unsigned int tag_stack_max, char *ass_tag_buffer)
+{/*{{{*/
+    int tag_stack_top_index,
+        i;
+    Ass_Data ass_data;
+
+    /* empty 검출이 가능 */
+    if((tag_stack_top_index = stack_top_index_get((void **)tag_stack, tag_stack_max)) < 0){
+        return -1;
+    }
+
+    memset(&ass_data, 0x00, sizeof(ass_data));
+
+    /* search stack (must be start 0) */
+    for(i = 0;i <= tag_stack_top_index;i ++){
+        if(sami_tag_ass_data_get(tag_stack[i], &ass_data) < 0){
+            return -2;
+        }
+    }
+
+    if(ass_data.face != NULL){
+        sami_tag_ass_cat(ass_data.face, ass_tag_buffer);
+        free(ass_data.face);
+    }
+
+    if(ass_data.color != NULL){
+        sami_tag_ass_cat(ass_data.color, ass_tag_buffer);
+        free(ass_data.color);
+    }
+
+    if(ass_data.bold == 1){
+        sami_tag_ass_cat("b900", ass_tag_buffer);
+    }
+
+    if(ass_data.italic == 1){
+        sami_tag_ass_cat("i1", ass_tag_buffer);
+    }
+
+    if(ass_data.underline == 1){
+        sami_tag_ass_cat("u1", ass_tag_buffer);
+    }
+
+    if(ass_data.strike == 1){
+        sami_tag_ass_cat("s1", ass_tag_buffer);
+    }
+
+    if(ass_data.rt == 1){
+        sprintf(ass_tag_buffer + strlen(ass_tag_buffer), "{\\fscx50}{\\fscy50}(");
+        /* sprintf(ass_tag_buffer, "{\\q}{\\fscx40}{\\fscy40}%s{\\r}\\N%s", text, text); */
+        /* sprintf(stack_ass_buffer, "{\\K100}중|ちゅ{\\K100}う{\\K100}ご{\\K100}く"); */
+        /* sprintf(stack_ass_buffer, "\\N{\\pos(100,150)}{\\fscx30}{\\fscy30}%s\\N{\\r}{\\pos(500,550)}Hi{\\r}123", text); */
+    }
+
+    return 1;
+}
+/*}}}*/
+
+static int sami_tag_parse_start(Tag *tag_stack[TAG_STACK_MAX], const unsigned int tag_stack_max, char *tag_name, char *tag_property_start_po, const int tag_property_flag)
+{/*{{{*/
+    int tag_stack_top_index = -1;
+    Tag  tag_stack_element_now,
+         tag_stack_element_push;
+
+    // initinal
+    tag_stack_element_now.name              = strdup(tag_name);
+    tag_stack_element_now.name_allocation   = 1;
+    tag_stack_element_now.property_count    = 0;
+
+    if(tag_property_flag == 1){
+        if(sami_tag_property_set(tag_property_start_po, &tag_stack_element_now) < 0){
+            /* fprintf(stderr, "[%s][%s(%d)] '%s'\n", __TIME__, __FILE__, __LINE__, "ERROR : Set Tag Property Failed"); */
+            sami_tag_stack_element_free(&tag_stack_element_now);
+            return -1;
+        }
+    }
+
+    if((tag_stack_top_index = sami_tag_stack_name_search(tag_stack, tag_stack_element_now.name, tag_stack_max)) >= 0){
+        // matched tag name, not check exception
+        sami_tag_stack_element_combine(tag_stack[tag_stack_top_index], &tag_stack_element_now, &tag_stack_element_push);
+        sami_tag_stack_element_free(&tag_stack_element_now);
+    }else{
+        tag_stack_element_push = tag_stack_element_now;
+    }
+
+    if(stack_push((void **)tag_stack, &tag_stack_element_push, sizeof(Tag), tag_stack_max) < 0){
+        /* fprintf(stderr, "[%s][%s(%d)] '%s'\n", __TIME__, __FILE__, __LINE__, "ERROR : Stack Push Failed"); */
+        sami_tag_stack_element_free(&tag_stack_element_now);
+        return -3;
+    }
+
+    return 0;
+}
+/*}}}*/
+
+// return 0 : no end tag
+// return 1 : end tag
+static int sami_tag_name_match(const char *tag_name, const char *tag_stack_pop_name)
+{/*{{{*/
+    // dismatch tag_push_name
+    if((strcasecmp(tag_name, tag_stack_pop_name)) != 0 ){
+        return -1;
+    }
+
+    return 1;
+}/*}}}*/
+
+static int sami_tag_parse_end(Tag *tag_stack[TAG_STACK_MAX], const unsigned int tag_stack_max, const char *tag_name)
+{/*{{{*/
+    Tag  *tag_stack_top;
+    int stack_top_index;
+
+    if((stack_top_index = stack_top_get((void **)tag_stack, (void *)&tag_stack_top, tag_stack_max)) < 0){
+        /* fprintf(stderr, "[%s][%s(%d)] '%s'\n", __TIME__,  __FILE__, __LINE__, "ERROR : Under flow or Over flow in stack. (end tag)"); */
+        return -1;
+    }
+
+    // 바로 이전태그의 시작과 지금태그의 끝이 같아야 함.
+    if(sami_tag_name_match(tag_name, tag_stack_top->name) < 0){
+        /* fprintf(stderr, "[%s][%s(%d)] '%s' '%s' '%s'\n", __TIME__, __FILE__, __LINE__, "ERROR : Not match open/close tag name :", tag_name, tag_stack_top->name); */
+        return -2;
+    }
+
+    stack_pop((void **)tag_stack, (unsigned int)stack_top_index, sami_tag_stack_element_free);
+
+    return 0;
+}/*}}}*/
+
+static int sami_tag_parse(Tag *tag_stack[TAG_STACK_MAX], const unsigned int tag_stack_max, char *source_string, char **ass_text)
+{/*{{{*/
+    char *tag_po,
+         *tag_container,
+         *tag_next_po,
+         *tag_name,
+         *tag_property_start_po,
+         text[TEXT_BUFFER_LENGTH_MAX]                    = {0},
+         ass_tag_text_buffer[ASS_TEXT_BUFFER_LENGTH_MAX] = {0};
+    int  tag_type,
+         tag_property_flag  = 0,
+         text_index         = 0;
+
+    tag_po = source_string;
+
+    while(*tag_po != '\0'){
+        switch(*tag_po){
+            case '<':
+                /* set tag text */
+                if(strcmp(text, "") != 0){
+                    /* fprintf(stderr, "T0: %s\n", ass_tag_text_buffer); */
+                    sami_tag_ass_stack(tag_stack, tag_stack_max, ass_tag_text_buffer);
+                    strncat(ass_tag_text_buffer, text, text_index);
+                }
+
+                /* get tag bracket */
+                if(sami_tag_container_get(tag_po, &tag_container, &tag_next_po) != 0){
+                    // not exist close tag (unable search '>')
+                    /* fprintf(stderr, "[%s][%s(%d)] '%s' '%s'\n", __TIME__, __FILE__, __LINE__, "ERROR : get container failed", tag_po); */
+                    goto END_OF_LINE;
+                }
+
+                /* get tag name, property */
+                if((tag_type = sami_tag_name_get(tag_container, &tag_name, &tag_property_flag, &tag_property_start_po)) < 0){
+                    /* fprintf(stderr, "[%s][%s(%d)] '%s'\n", __TIME__, __FILE__, __LINE__, "ERROR : not have tag name. ignore this tag"); */
+                    goto END_OF_TAG;
+                }
+
+                /* set tag stack */
+                switch(tag_type){
+                    case 0: /* Start tag    - (Stack Push) */
+                        sami_tag_parse_start(tag_stack, tag_stack_max, tag_name, tag_property_start_po, tag_property_flag);
+                        /* sami_tag_stack_print(__LINE__, tag_stack, tag_stack_max, "Tag Start Push OK, Stack Result :"); */
+                        break;
+                    case 1: /* End tag      - (Stack Pop)  */
+                        sami_tag_parse_end(tag_stack, tag_stack_max, tag_name);
+
+                        // close ruby tag
+                        if(strcasecmp(tag_name, "rt") == 0){
+                            strcat(ass_tag_text_buffer, ")");
+                        }
+                        strcat(ass_tag_text_buffer, "{\\r}");
+
+                        /* sami_tag_stack_print(__LINE__, tag_stack, tag_stack_max, "Tag End   Pop  OK, Stack Result :"); */
+                        break;
+                } END_OF_TAG:;
+
+                /* fprintf(stderr, "%s <%s> => '%s'\n", tag_type ? "END  " : "START", tag_name, ass_tag_text_buffer); */
+
+                text_index  = 0;
+                text[0]     = '\0';
+                free(tag_container);
+                free(tag_name);
+                tag_po = tag_next_po;
+                break;
+            default:
+                // not exist tag (only text), text is accure in buffer
+                text[text_index ++] = *tag_po++;
+                break;
+        }
+    } END_OF_LINE:;
+
+
+    sami_tag_ass_stack(tag_stack, tag_stack_max, ass_tag_text_buffer);
+    strncat(ass_tag_text_buffer, text, text_index);
+
+    *ass_text = strdup(ass_tag_text_buffer);
+
+    return 0;
+}/*}}}*/
+
+static void sami_add_line(subtitle *current, char *buffer, char **pos, Tag *tag_stack[TAG_STACK_MAX]) {
+    char *p,
+         *ass_text = NULL;
+
+    if(pos != NULL){
+        p  = *pos;
+        *p = 0;
+    }
+
     trail_space(buffer);
-    if (*buffer && current->lines < SUB_MAX_TEXT)
-        current->text[current->lines++] = strdup(buffer);
-    *pos = buffer;
+
+    if (*buffer && current->lines < SUB_MAX_TEXT){
+        sami_tag_parse(tag_stack, TAG_STACK_MAX, buffer, &ass_text);
+        current->text[current->lines++] = ass_text;
+        /* fprintf(stderr, "%s : '%s' -> '%s'\n", __FUNCTION__, buffer, ass_text); */
+    }
+
+    if(pos != NULL)
+        *pos = buffer;
 }
 
 static subtitle *sub_read_line_sami(stream_t* st, subtitle *current, int utf16) {
@@ -131,6 +1182,7 @@
     static char *s = NULL, *slacktime_s;
     char text[LINE_LEN+1], *p=NULL, *q;
     int state;
+    Tag *tag_stack[TAG_STACK_MAX] = {NULL};
 
     current->lines = current->start = current->end = 0;
     current->alignment = SUB_ALIGNMENT_BOTTOMCENTER;
@@ -176,10 +1228,10 @@
 
 	case 3: /* get all text until '<' appears */
 	    if (p - text >= LINE_LEN)
-	        sami_add_line(current, text, &p);
+	        sami_add_line(current, text, &p, tag_stack);
 	    if (*s == '\0') break;
 	    else if (!strncasecmp (s, "<br>", 4)) {
-                sami_add_line(current, text, &p);
+                sami_add_line(current, text, &p, tag_stack);
 		s += 4;
 	    }
 	    else if ((*s == '{') && !sub_no_text_pp) { state = 5; ++s; continue; }
@@ -200,12 +1252,14 @@
 		current->end = strtol (q + 6, &q, 0) / 10 - 1;
 		*p = '\0'; trail_space (text);
 		if (text[0] != '\0')
-		    current->text[current->lines++] = strdup (text);
+            sami_add_line(current, text, NULL, tag_stack);
+		    /* current->text[current->lines++] = strdup (text); */
 		if (current->lines > 0) { state = 99; break; }
 		state = 0; continue;
 	    }
-	    s = strchr (s, '>');
-	    if (s) { s++; state = 3; continue; }
+	    /* s = strchr (s, '>'); */
+	    /* if (s) { s++; state = 3; continue; } */
+        if (s) { s++; state = 3; *p++ = '<'; continue; }
 	    break;
        case 5: /* get rid of {...} text, but read the alignment code */
 	    if ((*s == '\\') && (*(s + 1) == 'a') && !sub_no_text_pp) {
@@ -249,6 +1303,7 @@
 	    if (current->start > 0) {
 		break; // if it is the last subtitle
 	    } else {
+        stack_free((void **)tag_stack, sami_tag_stack_element_free, TAG_STACK_MAX);
 		return 0;
 	    }
 	}
@@ -258,9 +1313,11 @@
     // For the last subtitle
     if (current->end <= 0) {
         current->end = current->start + sub_slacktime;
-        sami_add_line(current, text, &p);
+        sami_add_line(current, text, &p, tag_stack);
     }
 
+    stack_free((void **)tag_stack, sami_tag_stack_element_free, TAG_STACK_MAX);
+
     return current;
 }
 
